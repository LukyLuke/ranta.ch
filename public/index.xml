<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RANTA - Coding, Hacking, Teaching and more</title>
    <link>//ranta.ch/index.xml</link>
    <description>Recent content on RANTA - Coding, Hacking, Teaching and more</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-ch</language>
    <lastBuildDate>Thu, 17 Aug 2017 18:45:59 +0200</lastBuildDate>
    <atom:link href="//ranta.ch/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ESP-32/ESP-WROOM-32 verkabeln und programmieren</title>
      <link>//ranta.ch/tutorials/ESP-32-Initial/</link>
      <pubDate>Thu, 17 Aug 2017 18:45:59 +0200</pubDate>
      
      <guid>//ranta.ch/tutorials/ESP-32-Initial/</guid>
      <description>

&lt;p&gt;Die ESP-32 Mikrokontroller Familie sind ein optimales Produkt für IoT Sachen. Hergestellt werden sie von Espressif Systems und sind ein sogenanntes Low-Power System on a Chip (SoC) mit integriertem WiFi und dual-mode Bluetooth funktionalität. Mehr dazu auf der Webseite &lt;a href=&#34;http://esp32.net/&#34;&gt;esp32.net&lt;/a&gt; und den Produkseiten von &lt;a href=&#34;http://espressif.com/en/products/hardware&#34;&gt;Espressif&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Günstige Bezugsquellen findet man bei EBai, Amazon und natürlich Ali-Express.&lt;/p&gt;

&lt;h1 id=&#34;vorbereitung&#34;&gt;Vorbereitung&lt;/h1&gt;

&lt;p&gt;Man braucht:
* Einen ESP-WROOM-32 oder ESP-32
* Einen USB-to-Serial Adapter
* Eine 3.3V Quelle (wird meistens bei den USB2Serial Adaptern angeboten)&lt;/p&gt;

&lt;p&gt;Die einfachste Verkabelung ist, wenn man die +3.3V vom USB2Serial-Adapter mit dem 3V3 und dem EN Pin auf dem ESP-Chip verbindet, sowie den Ground (GND) mit dem Ground GND.
Weiter muss man den TX vom USB2Serial-Adapter mit dem RX auf dem Chip und den RX vom Adapter mit dem TX vom Chip verbinden.
Um eine Firmware auf den Chip zu laden muss man den IO0-Port vom Chip an den Ground (GND) hängen. Der einfachheit halber kann man hier einen Schalter/Taster oder auch einfach ein trennbares Kabel verwenden.&lt;/p&gt;

&lt;p&gt;So ist der ESP-32 bereits einsatzbereit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+------------+      +---------------+
| USB2Serial |      |   ESP-x-32    |
|            |      |           3V3 |---+-- +3.3V
|         Tx +------+ Rx         EN |--/
|   GND   Rx +------+ Tx   GND  IO0 |
+----+-------+      +-------+----+--+
     |                      |    |
     +----------------------+----+
                                \ Nur beim Upload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Achtung:&lt;/strong&gt; Auf keinen Fall mit +5.0V speisen, die ESP-32 Familie verträgt nur +1.8 - 3.8 Volt!&lt;/p&gt;

&lt;h1 id=&#34;benötigte-libraries-für-arduino&#34;&gt;Benötigte Libraries für Arduino&lt;/h1&gt;

&lt;p&gt;Um anständig mit dem ESP-32 zu arbeiten empfiehlt es sich mit dem &lt;a href=&#34;https://github.com/espressif/arduino-esp32&#34;&gt;Arduino-ESP32 Core&lt;/a&gt; zu arbeiten. Die Installation ist gut erklärt und spielt sich so ab:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Installation der &lt;a href=&#34;https://arduino.cc&#34;&gt;Arduino IDE&lt;/a&gt;, bei Slackware auch über SlackBuilds installierbar&lt;/li&gt;
&lt;li&gt;PySerial installieren, bei Slackware ist das bei &lt;a href=&#34;https://slackbuilds.org/repository/14.2/python/pyserial/&#34;&gt;SlackBuilds&lt;/a&gt; verfügbar
** Es kann auch mittels &lt;code&gt;pip install pyserial&lt;/code&gt; installiert werden&lt;/li&gt;
&lt;li&gt;Neue Hardware installieren: &lt;code&gt;mkdir -p ~/Arduino/hardware/espressif&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Das Git-Projekt klonen: &lt;code&gt;git clone https://github.com/espressif/arduino-esp32.git ~/Arduino/hardware/espressif/esp32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Abhängigkeiten installieren: &lt;code&gt;cd ~/Arduino/hardware/espressif/esp32/tools &amp;amp;&amp;amp; python get.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;stack-trace&#34;&gt;Stack-Trace&lt;/h2&gt;

&lt;p&gt;Optional kann (empfohlen) der &lt;a href=&#34;https://github.com/me-no-dev/EspExceptionDecoder&#34;&gt;ESP ExceptionDecoder&lt;/a&gt; installiert werden um einen lesbaren Stacktrace zu erhalten beim debuggen.&lt;/p&gt;

&lt;h1 id=&#34;programm-hochladen&#34;&gt;Programm hochladen&lt;/h1&gt;

&lt;p&gt;Nach einem Neustart der Adruino IDE sind nun die benötigten Hardware Einträge vorhanden. Für einen ESP-WROOM-32 werden folgende Einstellungen benötigt:
* &lt;strong&gt;Board:&lt;/strong&gt; FireBeetle-ESP-32
* &lt;strong&gt;Flash Frequency:&lt;/strong&gt; 80MHz
* &lt;strong&gt;Upload Speed:&lt;/strong&gt; 921600
* &lt;strong&gt;Port:&lt;/strong&gt; /dev/ttyUSB0 oder /dev/ttyUSB1 - das kann sich ändern wenn man den Chip resettet&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;//ranta.ch/images/tutorials/arduino_esp32/arduino_config.png&#34; title=&#34;Arduino-IDE Konfiguration&#34;&gt;&lt;img src=&#34;//ranta.ch/images/tutorials/arduino_esp32/arduino_config.png&#34; alt=&#34;Arduino-IDE Konfiguration&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Um nun das Programm hoch zu laden, muss der &lt;code&gt;IO0&lt;/code&gt; Pin auf LOW gesetzt werden, also mit dem Ground (GND) verbunden werden. Anschliessend Power-Off und Power-On um den Chip zu resetten. Wichtig ist, dass wenn man einen Taster verwendet um &lt;code&gt;IO0&lt;/code&gt; auf low zu halten, dieser muss die ganze Zeit gedrückt werden.&lt;/p&gt;

&lt;p&gt;Wenn der Chip resettet hat, muss nochmals der Port geprüft werden - dieser kann sich bei diesem Vorgang ändern (Warum auch immer das resetten eine Auswirkung auf meinen USB-to-Serial Adapter hat weiss ich nicht).&lt;/p&gt;

&lt;p&gt;Um das Programm hoch zu laden kann man nun einfach die in der IDE zur verwendung gestellte Funktion verwenden (Icons oben links zum kompilieren und hochladen).
Nach dem Hochladen sollte der Port &lt;code&gt;IO0&lt;/code&gt; wieder vom Ground getrennt werden und der Chip erneut resettet durch Power Off und Power On.&lt;/p&gt;

&lt;h2 id=&#34;einfaches-programm&#34;&gt;Einfaches Programm&lt;/h2&gt;

&lt;p&gt;Eines der einfachsten Programme kann so aussehen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void setup() {
  Serial.begin(115200);
}
 
void loop() {
  Serial.println(&amp;quot;Hello from ESP-WROOM-32&amp;quot;);
  delay(500);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nach dem hochladen kann dann wie gewohnt über den Serial-Monitor in der Arduino-IDE die Meldung angeschaut werden.&lt;/p&gt;

&lt;h1 id=&#34;demos-und-mehr&#34;&gt;Demos und mehr&lt;/h1&gt;

&lt;p&gt;Espressif hat im &lt;a href=&#34;https://github.com/espressif/esp-idf&#34;&gt;ESP-IDF Github Repository&lt;/a&gt; Demos und Beispiele. Diese sind zwar für die esp-idf ausgelegt, zeigen aber wie Bluetooth und WiFi genutzt werden kann.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Graph module for Xibo</title>
      <link>//ranta.ch/projects/xibo_digital_signage_graph_module/</link>
      <pubDate>Tue, 02 May 2017 10:00:44 +0200</pubDate>
      
      <guid>//ranta.ch/projects/xibo_digital_signage_graph_module/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://xibo.org.uk/&#34;&gt;Xibo&lt;/a&gt; is a powerfull Open Source Digital Signange CMS to bring Content to public Displays. In our Company in my Team we wanted to display the amount of bugs versus the amunt of UnitTests, Codecoverage and others. Therefore out central IT department gave us Access to our Xibo installation where we where able to show pages from Jira, SonarCube and others. With that I was not really happy and started to create a custom module for Xibo to draw graphs with data from one but also multiple systems over time. See &lt;a href=&#34;https://github.com/LukyLuke/xibo_rgraph&#34;&gt;Github LukyLuke/xibo_rgraph&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To show graphs on a Website I found &lt;a href=&#34;https://www.rgraph.net/&#34;&gt;RGraph&lt;/a&gt; some time ago. This was for now the ideal JavaScript-Library to use with Xibo, becasue it has Canvas- and SVG Support which is supported by the used Internet-Explorere component in the Xibo-Client.&lt;/p&gt;

&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;What you need is a running Xibo-1.8 installation.
Download or clone &lt;a href=&#34;https://github.com/LukyLuke/xibo_rgraph&#34;&gt;Github LukyLuke/xibo_rgraph&lt;/a&gt; directly into the xibo installation (or copy everything). The folder structure should match and there is no need for more setup or any other downloads.&lt;/p&gt;

&lt;p&gt;After this, go to the module settings page and enable the &lt;code&gt;RGraph&lt;/code&gt; Module.&lt;/p&gt;

&lt;h1 id=&#34;settings&#34;&gt;Settings&lt;/h1&gt;

&lt;p&gt;Currently the module is working as expected and is able to display one DataSet from the internally managed DataStore, or it can request up to two JSON-RPC for fetching data from remote hosts.&lt;/p&gt;

&lt;p&gt;In the main settings dialog you can define the default colors used for printing the Graphs. Not forget to enable the Module here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//ranta.ch/images/xibo_rgraph/rgraph_module_settings.png&#34; alt=&#34;Main Module settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the page settings there are a lot of settings to make. On the main page you have to choose the type of graph to show:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//ranta.ch/images/xibo_rgraph/rgraph_module_page_1.png&#34; alt=&#34;General Page settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the Data-Pane you can choose the type of Data to show. Depending on the selection even &amp;ldquo;JSON&amp;rdquo; or &amp;ldquo;Dataset&amp;rdquo; is shown on the panes area.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//ranta.ch/images/xibo_rgraph/rgraph_module_page_2.png&#34; alt=&#34;Data settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The optional Javascript is for creating the right data-structure for RGraph. If you&amp;rsquo;re using a DataSet, just &lt;code&gt;return json&lt;/code&gt;.
For Example there could be something like this when you request Data from SonarCube:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function prepareJsonData(json, json2) {
    // This function will be called just after the JSON/Datastream data is received.
    // In here you have to prepare the data to be in teh right format for the RGraph-Library:
    //    data = { data: [val, val, val, ...],
    //             labels: [lbl, lbl, lbl, ...],
    //             legend: [lbl, lbl, lbl, ...] }
    // or if you have more than one Data-Stream to visualize (bar, line, radar, waterfall, scatter):
    //    data = { data: [[val, val, val, ...], [val, val, val, ...]],
    //             labels: [lbl, lbl, lbl, ...],
    //             legend: [lbl, lbl, lbl, ...] }
    //
    // The &#39;data&#39; contains all Data values as nummeric (float/integer)
    // The &#39;labels&#39; contains all X-Axis labels. For better readibility just show every 10th label only
    // The &#39;legend&#39; contains all keys to show the legend. The real values are evaluated with the &#39;geLabel(key)&#39; function above
    var data = {data:[], labels:[], legend: []};
    for (x in json2[0].cols) {
        data.data.push([]);
        data.legend.push(json2[0].cols[x].metric);
    }
    for (x in json2[0].cells) {
        var time = json2[0].cells[x].d;
        var values = json2[0].cells[x].v;
        if (x%10 == 0) data.labels.push(time);
        for (y in values) {
            data.data[y].push(values[y]);
        }
    }
    return data;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here for example a JSON-Request Settings-Page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//ranta.ch/images/xibo_rgraph/rgraph_module_page_3.png&#34; alt=&#34;JSON settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the second JSON-RPC Uri (and also post-data area) you can use all values from the first JSON-Response.
If for example the first Call results in a Data-Structure like this: &lt;code&gt;Object { first: [val1, val2], second: { first: Hello, second: World } }&lt;/code&gt; and so on, you can use &lt;code&gt;${first[0]}&lt;/code&gt; for &lt;em&gt;val1&lt;/em&gt; or &lt;code&gt;${second.first} ${second.second}&lt;/code&gt; for a &lt;em&gt;Hello World&lt;/em&gt; in the URI and Post-Data.&lt;/p&gt;

&lt;p&gt;On the last page, the Advaced panel, you can define to show a legend and position it. Depending on what you select the field disapear magically :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//ranta.ch/images/xibo_rgraph/rgraph_module_page_4.png&#34; alt=&#34;Advanced settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The optional Javascript is for a mapping from Label-Keys to a human readable String. For Example there could be something like this when you request Data from SonarCube:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function getLabel(key) {
    // This function is called for each Data-Stream you are going to visualize.
    // Just make a simple &amp;quot;swicth-case&amp;quot; construct in here and return a human readable label for each data-stream key
    switch (key) {
        case &amp;quot;line_coverage&amp;quot;: return &amp;quot;Lines covered by UnitTests&amp;quot;;
        case &amp;quot;branch_coverage&amp;quot;: return &amp;quot;Conditions covered by UnitTests&amp;quot;;
        default: return key;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally you will see something like this in on the Layout-Page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//ranta.ch/images/xibo_rgraph/rgraph_module_preview.png&#34; alt=&#34;Layout Preview&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;developing&#34;&gt;Developing&lt;/h1&gt;

&lt;p&gt;Developing a new custom module for Xibo id quite easy. There is a good documentation but more helpful for me where the eisting modules.&lt;/p&gt;

&lt;p&gt;All in All this are the main steps:
* Create a folder named like your module in the &lt;code&gt;custom&lt;/code&gt; Folder
* Create a File in the &lt;code&gt;custom&lt;/code&gt; Folder named like &lt;code&gt;MODULE.json&lt;/code&gt; with Content like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;title&amp;quot;: &amp;quot;RGraph Data-Visualization&amp;quot;,
  &amp;quot;author&amp;quot;: &amp;quot;Lukas Zurschmiede&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;A module to visualize data from JSON or a local Datastore with a Graph.&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;rgraph&amp;quot;,
  &amp;quot;class&amp;quot;: &amp;quot;Xibo\\Custom\\MODULE\\MODULE&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;If you need 3rd-Party Libraries, create a Folder &lt;code&gt;web/vendor/MODULE&lt;/code&gt; and place all Files in there.&lt;/li&gt;
&lt;li&gt;If you need images or other resources, place them in &lt;code&gt;web/modules/MODULE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In your &lt;code&gt;custom/MODULE&lt;/code&gt; Folder create the Class-File and the Template-Files:
** Case sensitive: MODULE.php
** Lower-Case: MODULE-form-add.twig
** Lower-Case: MODULE-form-edit.twig
** Optionally I think, Lower-Case: MODULE-form-settings.twig&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;files&#34;&gt;Files&lt;/h2&gt;

&lt;p&gt;For example twig files check out the existing templates in the &lt;code&gt;modules&lt;/code&gt; Folder.&lt;/p&gt;

&lt;p&gt;The built-in modules you find in the `` Folder.
Basically a module has the following structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;namespace Xibo\Custom\MODULE;

use InvalidArgumentException;
use Respect\Validation\Validator as v;

class MODULE extends \Xibo\Widget\ModuleWidget {
	public $codeSchemaVersion = 1;
	private $resourceFolder;
	
	/**
	 * MODULE constructor.
	 * @Override
	 */
	public function init() {
		$this-&amp;gt;resourceFolder = PROJECT_ROOT . &#39;/web/modules/MODULE&#39;;
		v::with(&#39;Xibo\\Validation\\Rules\\&#39;);
	}
	
	/**
	 * Install or Update this module
	 * @param ModuleFactory $moduleFactory
	 * @Override
	 */
	public function installOrUpdate($moduleFactory) {
		// Install
		if ($this-&amp;gt;module == null) {
			$module = $moduleFactory-&amp;gt;createEmpty();
			$module-&amp;gt;name = &#39;MODULE&#39;;
			$module-&amp;gt;type = &#39;MODULE&#39;; // lower-case
			$module-&amp;gt;viewPath = &#39;../custom/MODULE&#39;;
			$module-&amp;gt;class = &#39;Xibo\Custom\MODULE\MODULE&#39;;
			$module-&amp;gt;description = &#39;Graphical data visualization&#39;;
			$module-&amp;gt;imageUri = &#39;forms/library.gif&#39;;
			$module-&amp;gt;enabled = 1;
			$module-&amp;gt;previewEnabled = 1;
			$module-&amp;gt;assignable = 1;
			$module-&amp;gt;regionSpecific = 1;
			$module-&amp;gt;renderAs = &#39;html&#39;;
			$module-&amp;gt;schemaVersion = $this-&amp;gt;codeSchemaVersion;
			$module-&amp;gt;defaultDuration = 240;
			$module-&amp;gt;settings = [];
			$this-&amp;gt;setModule($module);
			$this-&amp;gt;installModule();
		}
		// Check we are all installed
		$this-&amp;gt;installFiles();
	}
	
	/**
	 * Install all 3rd-Party Files
	 */
	public function installFiles() {
		$this-&amp;gt;mediaFactory-&amp;gt;createModuleSystemFile(PROJECT_ROOT . &#39;/web/modules/vendor/MODULE/....js&#39;)-&amp;gt;save();
		$this-&amp;gt;mediaFactory-&amp;gt;createModuleSystemFile(PROJECT_ROOT . &#39;/web/modules/vendor/MODULE/....js&#39;)-&amp;gt;save();
	}
	
	/**
	 * Optional: Remove this method if there is no special settings form
	 *
	 * Form for updating the module settings
	 * @return Name of the Settings-Form
	 * @Override
	 */
	public function settingsForm() {
		return &#39;module-form-settings&#39;;
	}
	
	/**
	 * Process any module settings
	 * @return An array of the processed settings.
	 * @Override
	 */
	public function settings() {
		$this-&amp;gt;module-&amp;gt;settings[&#39;SETTING_NAME&#39;] = $this-&amp;gt;getSanitizer()-&amp;gt;getString(&#39;SETTING_NAME&#39;, ...);
		$this-&amp;gt;module-&amp;gt;settings[&#39;SETTING_NAME&#39;] = $this-&amp;gt;getSanitizer()-&amp;gt;getString(&#39;SETTING_NAME&#39;, ...);
		return $this-&amp;gt;module-&amp;gt;settings;
	}
	
	/**
	 * Validates the settings when saving a layout
	 * @Override
	 */
	public function validate() {
		if ($this-&amp;gt;getUseDuration() == 1 &amp;amp;&amp;amp; $this-&amp;gt;getDuration() == 0)
			throw new InvalidArgumentException(__(&#39;You must enter a duration.&#39;));
	}
	/**
	 * Adds a Widget
	 * @Override
	 */
	public function add() {
		$this-&amp;gt;setOption(&#39;name&#39;, $this-&amp;gt;getSanitizer()-&amp;gt;getString(&#39;name&#39;));
		$this-&amp;gt;setUseDuration($this-&amp;gt;getSanitizer()-&amp;gt;getCheckbox(&#39;useDuration&#39;));
		$this-&amp;gt;setDuration($this-&amp;gt;getSanitizer()-&amp;gt;getInt(&#39;duration&#39;, $this-&amp;gt;getDuration()));
		
		$this-&amp;gt;setOption(&#39;SETTING_NAME&#39;, $this-&amp;gt;getSanitizer()-&amp;gt;getString(&#39;SETTING_NAME&#39;));
		$this-&amp;gt;setOption(&#39;SETTING_NAME&#39;, $this-&amp;gt;getSanitizer()-&amp;gt;getString(&#39;SETTING_NAME&#39;));
		
		$this-&amp;gt;validate();
		$this-&amp;gt;saveWidget();
	}
	/**
	 * Edit the Widget
	 * @Override
	 */
	public function edit() {
		$this-&amp;gt;setOption(&#39;name&#39;, $this-&amp;gt;getSanitizer()-&amp;gt;getString(&#39;name&#39;));
		$this-&amp;gt;setUseDuration($this-&amp;gt;getSanitizer()-&amp;gt;getCheckbox(&#39;useDuration&#39;));
		$this-&amp;gt;setDuration($this-&amp;gt;getSanitizer()-&amp;gt;getInt(&#39;duration&#39;, $this-&amp;gt;getDuration()));
		
		$this-&amp;gt;setOption(&#39;SETTING_NAME&#39;, $this-&amp;gt;getSanitizer()-&amp;gt;getString(&#39;SETTING_NAME&#39;));
		$this-&amp;gt;setOption(&#39;SETTING_NAME&#39;, $this-&amp;gt;getSanitizer()-&amp;gt;getString(&#39;SETTING_NAME&#39;));
		
		$this-&amp;gt;validate();
		$this-&amp;gt;saveWidget();
	}
	
	/**
	 * Preview code for a module
	 * 
	 * @param int $width
	 * @param int $height
	 * @param int $scaleOverride The Scale Override
	 * @return string The Rendered Content
	 * @Override
	 */
	public function preview($width, $height, $scaleOverride = 0) {
		return $this-&amp;gt;previewAsClient($width, $height, $scaleOverride);
	}
	
	/**
	 * GetResource for the Graph page
	 * 
	 * @param int $displayId
	 * @return mixed|string
	 * @Override
	 */
	public function getResource($displayId = 0) {
		// Load in the template
		$data = [];
		
		// Replace the View Port Width?
		$isPreview = ($this-&amp;gt;getSanitizer()-&amp;gt;getCheckbox(&#39;preview&#39;) == 1);
		
		// Replace the View Port Width?
		$data[&#39;viewPortWidth&#39;] = ($isPreview) ? $this-&amp;gt;region-&amp;gt;width : &#39;[[ViewPortWidth]]&#39;;
		
		// Head Content contains all needed scrips from XY
		$headContent  = &#39;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;&#39; . $this-&amp;gt;getResourceUrl(&#39;vendor/MODULE/....js&#39;) . &#39;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#39;.&amp;quot;\n&amp;quot;;
		$data[&#39;head&#39;] = $headContent;
		
		// Body content
		$data[&#39;body&#39;] = &#39;&amp;lt;div id=&amp;quot;MODULE_Content_Whatever_&#39; . $displayId . &#39;&amp;quot;&amp;gt;
			Put and create here your HTML
		&amp;lt;/div&amp;gt;&#39;;
		
		// After body content - mostly XIBO-Stuff for scaling and so on
		$javaScriptContent  = &#39;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;&#39; . $this-&amp;gt;getResourceUrl(&#39;vendor/jquery-1.11.1.min.js&#39;) . &#39;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#39;;
		$javaScriptContent .= &#39;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;&#39; . $this-&amp;gt;getResourceUrl(&#39;xibo-layout-scaler.js&#39;) . &#39;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#39;;
		$javaScriptContent .= &#39;&amp;lt;script&amp;gt;
			$(document).ready(function() {
				var options = &#39; . json_encode($options) . &#39;
				$(&amp;quot;#&#39; . $containerId . &#39;&amp;quot;).xiboLayoutScaler(options);
		});
		
		// Replace the After body Content
		$data[&#39;javaScript&#39;] = $javaScriptContent;
		return $this-&amp;gt;renderTemplate($data);
	}
	
	/**
	 * Returns if this module is valid or not.
	 *   0 =&amp;gt; Invalid
	 *   1 =&amp;gt; Valid
	 *   2 =&amp;gt; Unknown
	 * @return Validation-Level
	 * @Override
	 */
	public function IsValid() {
		// Can&#39;t be sure because the client does the rendering
		return 2;
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Adruino programmieren mit KDevelope</title>
      <link>//ranta.ch/tutorials/Programming_Arduino_With_Kdevelop/</link>
      <pubDate>Sun, 05 Mar 2017 10:41:12 +0100</pubDate>
      
      <guid>//ranta.ch/tutorials/Programming_Arduino_With_Kdevelop/</guid>
      <description>

&lt;p&gt;Wie jeder Programmierer hat man seinen eigenen Favoriten was die Entwicklungsumgebung angeht. Das ist bei mir Slackware64-current mit KWrite und KDevelop, sowie Yakuake als Konsole - und definitiv nicht das grauslige Java-Arduino-Studio :)&lt;/p&gt;

&lt;p&gt;Einen Allgemeinen Artikel wie man das zusammenbringt findet man auf dem &lt;a href=&#34;http://playground.arduino.cc/Code/Kdevelop&#34;&gt;Arduino Playground&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;tl-dr&#34;&gt;TL;DR;&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;KDevelop installieren&lt;/li&gt;
&lt;li&gt;Die AVR-Toolchain installieren&lt;/li&gt;
&lt;li&gt;Die neuste &lt;code&gt;adruino.zip&lt;/code&gt; herunterladen: &lt;a href=&#34;http://forum.arduino.cc/index.php?topic=244741.0&#34;&gt;New Template for Kdevelop/CMake for Arduino 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Entpacken und als tar.bz2 neu verpacken: &lt;code&gt;unzip arduino.zip &amp;amp;&amp;amp; cd arduino &amp;amp;&amp;amp; tar -cjf ../arduino.tar.bz2 .&lt;/code&gt;
3.1 Für alle nach &lt;code&gt;/usr/share/[kde4/]apps/kdevappwizard/templates/&lt;/code&gt; kopieren
3.2 Oder als Egomane nach &lt;code&gt;~/.kde/share/apps/kdevappwizard/templates/&lt;/code&gt; kopieren&lt;/li&gt;
&lt;li&gt;Have fun&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;im-detail&#34;&gt;Im Detail&lt;/h1&gt;

&lt;h2 id=&#34;die-komplette-avr-toolchain-installieren&#34;&gt;Die komplette AVR-Toolchain installieren&lt;/h2&gt;

&lt;p&gt;Bei Slackware geht das am einfachsten über &lt;a href=&#34;https://slackbuilds.org/&#34;&gt;SlackBuilds.org&lt;/a&gt;, andere Distributionen haben das schon im Package-Manager enthalten.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;avr-binutils&lt;/code&gt; Benötigte Tools für das Cross-Compiling&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avr-gcc&lt;/code&gt; Cross-Compiling für AVR&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avr-gdb&lt;/code&gt; für das debuggen mittels GDB&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avr-libc&lt;/code&gt; beinhaltet die C-Library&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avrdude&lt;/code&gt; für den Up-/Download der Firmware&lt;/li&gt;
&lt;li&gt;Optional &lt;code&gt;avarice&lt;/code&gt; wenn man mittels JTag debuggen will&lt;/li&gt;
&lt;li&gt;Optional &lt;code&gt;avra&lt;/code&gt; für Atmel Assembler&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;kdevelop-templates&#34;&gt;KDevelop Templates&lt;/h2&gt;

&lt;p&gt;Zuerst braucht man das neuste &lt;code&gt;arduino.zip&lt;/code&gt; aus dem Thread &lt;a href=&#34;http://forum.arduino.cc/index.php?topic=244741.0&#34;&gt;New Template for Kdevelop/CMake for Arduino 1.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dieses zip muss man neu packen als &lt;code&gt;tar.bz2&lt;/code&gt;, also entpacken und neu verpacken: &lt;code&gt;unzip arduino.zip &amp;amp;&amp;amp; cd arduino &amp;amp;&amp;amp; tar -cjf ../arduino.tar.bz2 .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Will man das Template für alle Benutzer zur Verfügung stellen, dann muss man es nach &lt;code&gt;/usr/share/[kde4/]apps/kdevappwizard/templates/&lt;/code&gt; kopieren.
Will man das Template nur für sich, dann kann man es nach &lt;code&gt;~/.kde/share/apps/kdevappwizard/templates/&lt;/code&gt; kopieren.&lt;/p&gt;

&lt;h2 id=&#34;neues-projekt&#34;&gt;Neues Projekt&lt;/h2&gt;

&lt;p&gt;Startet man KDevelop und erstellt ein neues Projekt, hat man unter dem Punkt &lt;strong&gt;C/C++&lt;/strong&gt; nun das Template &lt;strong&gt;Arduino&lt;/strong&gt; welches man verwenden kann.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//ranta.ch/images/tutorials/kdevelope_arduino_new_project.png&#34; alt=&#34;KDevelop New Project Wizard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Nachdem das Projekt erstellt wurde, hat man ein neues Demo-File und ein paar Libraries welche man gut gebrauchen kann.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//ranta.ch/images/tutorials/kdevelope_arduino_new_project_files.png&#34; alt=&#34;KDevelop Project Structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Damit die includes gefunden werden, muss noch der avr-include Path konfiguriert werden. Das macht man am einfachsten über die Project-Settings, wo man den Pfad &lt;code&gt;/usr/avr/include/&lt;/code&gt; hinzufügt:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//ranta.ch/images/tutorials/kdevelope_arduino_new_project_settings.png&#34; alt=&#34;KDevelop Project Structure&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Was man nun noch anpassen muss ist die &lt;code&gt;CMakeLists.txt&lt;/code&gt; mit einer eigenen Konfig unter dem &lt;code&gt;platform&lt;/code&gt; Ordner (analog zu dem schon bestehenden &lt;code&gt;arduino_leonardo&lt;/code&gt;) oder man importiert die &lt;code&gt;libarduino.cmake&lt;/code&gt; und definiert seine eigenen Parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;set(ARDUINO_BOARD &amp;quot;AVR_LEONARDO&amp;quot;)
set(ARDUINO_VARIANTS &amp;quot;leonardo&amp;quot;)
set(ARDUINO_MCU &amp;quot;atmega32u4&amp;quot;)
set(ARDUINO_FCPU &amp;quot;16000000L&amp;quot;)
set(ARDUINO_UPLOAD_PROTOCOL &amp;quot;avr109&amp;quot;)
set(ARDUINO_UPLOAD_SPEED &amp;quot;57600&amp;quot;)
set(ARDUINO_PORT &amp;quot;/dev/ttyACM0&amp;quot;)

include(${CMAKE_SOURCE_DIR}/platforms/libarduino.cmake)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;template-anpassen&#34;&gt;Template anpassen&lt;/h3&gt;

&lt;p&gt;Das aktuelle Template hat immer den &lt;em&gt;Arduino Leonardo&lt;/em&gt; als Standard drin. Wenn man das nicht will, resp. mit einem &lt;em&gt;Arduino Nano&lt;/em&gt; oder anderen Board arbeitet, kann man das Template auch entsprechend anpassen. Also entpacken, Anpassen und neu verpacken (wie oben erleutert).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prusa i4 mit einem RaspberryPi und OctoPrint</title>
      <link>//ranta.ch/projects/Prusa_Raspberry_OctoPrint/</link>
      <pubDate>Sat, 04 Mar 2017 09:00:24 +0100</pubDate>
      
      <guid>//ranta.ch/projects/Prusa_Raspberry_OctoPrint/</guid>
      <description>

&lt;p&gt;Um meinen 3D-Drucker, ein Prusa i4, sinnvoll zu verwenden, habe ich immer nach einer optimalen, autonomen Lösung gesucht, bei welcher ich einfach meine Modelle hochladen kann und der Rest +passiert+ einfach so von alleine.
Also habe ich angefangen mir auf einem RaspberryPi selber etwas zusammen zu bastelnmit Pronterface und anderen Tools.
So ganz zufrieden war ich aber nie wirklich&amp;hellip;&lt;/p&gt;

&lt;p&gt;Seit dem Tag an dem ich nach einem Update von Slic3r die Optionen zu &lt;a href=&#34;http://octoprint.org/&#34;&gt;OctoPrint&lt;/a&gt; gesehen habe, verwende und empfehle ich nur noch dieses Setup.
Hier wie ich mein System aufgebaut habe - ein wenig Linux kenntnisse sind vorausgesetzt, vorallem wenn es um das installieren von paketen und Anhängigkeiten geht (die habe ich nicht mehr alle im Kopf).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//ranta.ch/images/octoprint/octoprint_logo.png&#34; alt=&#34;OctoPrint Logo&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;vorbereitungen&#34;&gt;Vorbereitungen&lt;/h1&gt;

&lt;p&gt;Man braucht:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;hellip;einen 3D-Drucker&lt;/li&gt;
&lt;li&gt;&amp;hellip;ich empfehle Marlin als Firmware, bei Repetier und Mendelmax hatte ich immer Aussetzer und andere Probleme&lt;/li&gt;
&lt;li&gt;&amp;hellip;einen RaspberryPi&lt;/li&gt;
&lt;li&gt;&amp;hellip;das Kameramodul zum RaspberryPi&lt;/li&gt;
&lt;li&gt;&amp;hellip;oder ein UVC-Kompatible Webcam&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;raspberrypi-installieren&#34;&gt;RaspberryPi installieren&lt;/h2&gt;

&lt;p&gt;Den RaspberryPi normal mit einem simplen Raspbian installieren und betriebsbereit machen. Hierzu gibt es schon genug Anleitungen.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Raspbian herunterladen&lt;/li&gt;
&lt;li&gt;Raspbian auf die Flash entpacken&lt;/li&gt;
&lt;li&gt;Bildschirm und Tastatur anhängen&lt;/li&gt;
&lt;li&gt;RaspberryPi starten&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Für das ganze Setup wird kein Xorg oder anderer Window-Manager gebraucht, also nur in den Init-3 starten!
Wenn man nicht als &lt;code&gt;root&lt;/code&gt; arbeitet für den ganzen Setup-Prozess, den verwendeten User den Gruppen &lt;code&gt;tty, dialout, video&lt;/code&gt; hinzufügen und &lt;code&gt;sudo&lt;/code&gt; nicht vergessen.&lt;/p&gt;

&lt;h2 id=&#34;raspberrypi-setup&#34;&gt;RaspberryPi Setup&lt;/h2&gt;

&lt;p&gt;Den RaspberryPi konfigurieren:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ raspi-config
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Kein X-Server/Window-Manager&lt;/li&gt;
&lt;li&gt;Netzwerk&lt;/li&gt;
&lt;li&gt;SSH-Server&lt;/li&gt;
&lt;li&gt;Webcam - Wenn das Webcam-Modul verwendet wird&lt;/li&gt;
&lt;li&gt;Alles andere nach eigenem Bedarf&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;firmware-upgrade&#34;&gt;Firmware-Upgrade&lt;/h3&gt;

&lt;p&gt;Anschliessend empfehle ich mit &lt;code&gt;rpi-update&lt;/code&gt; alles auf den neusten Stand zu bringen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt-get install rpi-update
$ rpi-update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wenn rpi-update nicht mittels apt-get installiert werden kann:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://raw.github.com/Hexxeh/rpi-update/master/rpi-update -O /usr/bin/rpi-update &amp;amp;&amp;amp; chmod +x /usr/bin/rpi-update
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pakete-installieren&#34;&gt;Pakete installieren&lt;/h3&gt;

&lt;p&gt;Folgende Pakete müssen installiert werden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt-get install python-pip gcc cmake git git-core libav-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;installation-und-setup-abschliessen&#34;&gt;Installation und Setup abschliessen&lt;/h3&gt;

&lt;p&gt;Nach dem Setup und Update den RaspberryPi neu starten!&lt;/p&gt;

&lt;p&gt;Anschliessend sollten alle Pakete aktualisiert werden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt-get update
$ apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;webcam-mit-mjpg-streamer&#34;&gt;Webcam mit MJPG-Streamer&lt;/h1&gt;

&lt;p&gt;Der Originale &lt;a href=&#34;https://sourceforge.net/projects/mjpg-streamer/&#34;&gt;MJPG-Streamer&lt;/a&gt; unterstützt das Kamera-Modul vom RaspberryPi nicht, es gibt aber einen Fork von Liam. Jackson unter GitHub: &lt;a href=&#34;https://github.com/jacksonliam/mjpg-streamer&#34;&gt;MJPEG-Streamer mit RaspiCam&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Einfach das Git-Repo klonen und installieren:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /opt/
$ git clone https://github.com/jacksonliam/mjpg-streamer.git
$ cd mjpg-streamer/mjpg-streamer-experimental
$ make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wenn alles gut läuft &lt;code&gt;mjpg-streamer&lt;/code&gt; kompiliert mit einigen input- und output-Plugins. Diese werden direkt in den &lt;code&gt;mjpg-streamer/mjpg-streamer-experimental&lt;/code&gt; Ordner kopiert und können von dort ausgeführt werden.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /opt/mjpg-streamer/mjpg-streamer-experimental
$ ./mjpeg-streamer -i &amp;quot;./input_raspicam.so&amp;quot; -o &amp;quot;./output_http.so -p 8080 -w www&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anschliessend sollte man über den Browser direkt darauf zugreifen können: &lt;a href=&#34;http://RASPI.IP.ADRESSE:8080/&#34;&gt;http://RASPI.IP.ADRESSE:8080/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Für eine UVC-Webcam muss noch das Modul geladen werden, der rest bleibt sich gleich:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ modprobe uvcvideo
$ ./mjpeg-streamer -i &amp;quot;./input_uvc.so&amp;quot; -o &amp;quot;./output_http.so -p 8080 -w www&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;octoprint-installieren&#34;&gt;OctoPrint installieren&lt;/h1&gt;

&lt;p&gt;Die installation von &lt;a href=&#34;http://octoprint.org/&#34;&gt;OctoPrint&lt;/a&gt; braucht relativ viele Python-Module welche einfach mittels &lt;code&gt;pip&lt;/code&gt; installiert werden können. Das Problem dabei ist, dass bei einer normalen Raspbian-Installation das &lt;code&gt;/tmp&lt;/code&gt; als &lt;code&gt;60MB tmpfs&lt;/code&gt; gemountet wird, was im Normalfall total ausreichend ist.&lt;/p&gt;

&lt;p&gt;Für pip und die 10k Python-Module ist das jedoch zu wenig, deswegen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ umount /tmp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;herunterladen-und-installieren&#34;&gt;Herunterladen und Installieren&lt;/h2&gt;

&lt;p&gt;Auch OctoPrint wieder unter /opt installieren:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /opt
$ git clone https://github.com/foosel/OctoPrint.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bei meiner Installation bin ich bei mindestens einem Python-Modul gescheitert, deswegen sollte mindestens dieses über apt-get installiert werden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt-get install python-Babbel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alle anderen können dann über pip automatisch installiert werden:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /opt/OctoPrint
$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Schlägt ein Paket fehl, die Ausgabe prüfen und die Abhängigkeiten auflösen oder das Modul mittels apt-get manuell installieren.&lt;/p&gt;

&lt;h2 id=&#34;octoprint-starten&#34;&gt;OctoPrint starten&lt;/h2&gt;

&lt;p&gt;Sind alle Abhängigkeiten installiert, kann &lt;a href=&#34;http://octoprint.org/&#34;&gt;OctoPrint&lt;/a&gt; gestartet werden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd /opt/OctoPrint
$ ./run serve --iknowwhatimdoing --port 80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Das dauert immer eine Weile, anschliessend kann dann über den Webbrowser alles weitere gemacht werden: &lt;a href=&#34;http://RASPI.IP.ADRESSE/&#34;&gt;http://RASPI.IP.ADRESSE/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;nützliche-einstellungen&#34;&gt;Nützliche Einstellungen&lt;/h2&gt;

&lt;p&gt;Die Settings von &lt;a href=&#34;http://octoprint.org/&#34;&gt;OctoPrint&lt;/a&gt; werden im Home des jeweiligen Benutzers gespeichert: &lt;code&gt;~/.octoprint/config.yaml&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;zugangsbeschränkung&#34;&gt;Zugangsbeschränkung&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Unter:&lt;/strong&gt; Einstellungen -&amp;gt; Funktionen -&amp;gt; Zugangsbeschränkung&lt;/p&gt;

&lt;p&gt;Neuen Benutzer erstellen um den Zugriff zu beschränken&lt;/p&gt;

&lt;h3 id=&#34;webcam&#34;&gt;Webcam&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Unter:&lt;/strong&gt; Einstellungen -&amp;gt; Webcam &amp;amp; Zeitraffer&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stream URL&lt;/strong&gt;     &lt;a href=&#34;http://RASPI.IP.ADRESSE:8080/?action=stream&#34;&gt;http://RASPI.IP.ADRESSE:8080/?action=stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Snapshot URL&lt;/strong&gt;   &lt;a href=&#34;http://RASPI.IP.ADRESSE:8080/?action=snapshot&#34;&gt;http://RASPI.IP.ADRESSE:8080/?action=snapshot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FFMPEG Pfad&lt;/strong&gt;    /usr/bin/avconv&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;system-settings&#34;&gt;System-Settings&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Unter:&lt;/strong&gt; Einstellungen -&amp;gt; OctoPrint -&amp;gt; Server&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Restart OctoPrint&lt;/strong&gt; /etc/init.d/octoprint restart&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Restart System&lt;/strong&gt;    /sbin/reboot&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shutdown System&lt;/strong&gt;   /sbin/halt&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;plugins&#34;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;OctoPrint kann mit vielen &lt;a href=&#34;http://plugins.octoprint.org/&#34;&gt;Plugins&lt;/a&gt; ausgestattet werden. Sinnvolle und Sinnlose :)&lt;/p&gt;

&lt;h3 id=&#34;telegram&#34;&gt;Telegram&lt;/h3&gt;

&lt;p&gt;Um ein komplett autonomes System zu haben, welches man auch mal ein paar Stundenunbeaufsichtigt laufen lassen kann, bietet sich das Telegram-Plugin an.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unter:&lt;/strong&gt; Einstellungen -&amp;gt; PluginManager -&amp;gt; Mehr&amp;hellip;
Nach dem Plungin &lt;em&gt;Telegram&lt;/em&gt; suchen und installieren. Wie man den Telegram-Bot erstellt wird gut auf der GitHub-Seite erklärt: &lt;a href=&#34;https://github.com/fabianonline/OctoPrint-Telegram/blob/stable/README.md#create-telegram-bot&#34;&gt;Create Telegram Bot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Wenn der Bot erstellt ist, meine Empfehlung ist dass man die Group und Privacy Dinger abstellt, kann man nach dem eigenen Bot suchen und per Kommando &lt;code&gt;/start&lt;/code&gt; anfangen mit dem Bot zu sprechen. Jeden benutzer und jede Gruppe in welche man den Bot haben will, muss man dann noch in den OctoPrint Einstellungen freischalten: &lt;strong&gt;Unter:&lt;/strong&gt; Einstellungen -&amp;gt; Plugins -&amp;gt; Telegram&lt;/p&gt;

&lt;h3 id=&#34;z-distance&#34;&gt;Z-Distance&lt;/h3&gt;

&lt;p&gt;Dieses Plugin zeigt einem die Z-Distanz in der Sidebar an, an welcher der Printer aktuell ist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unter:&lt;/strong&gt; Einstellungen -&amp;gt; PluginManager -&amp;gt; Mehr&amp;hellip;
Nach dem Plungin &lt;em&gt;Z-Distance&lt;/em&gt; suchen und installieren.&lt;/p&gt;

&lt;h2 id=&#34;octoprint-automatisch-starten&#34;&gt;OctoPrint automatisch starten&lt;/h2&gt;

&lt;p&gt;Es gibt bei OctoPrint eine Einstellung, dass dieser im Daemon-Mode gestartet wird. Der ist bei mir immer abgekackt, weswegen ich den einfach im Background starte.&lt;/p&gt;

&lt;p&gt;Folgendes Script kann verwendet werden um MJPG-Streamer und OctoPrint automatisch zu starten und beenden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/sh
### BEGIN INIT INFO
# Provides:          octoprint
# Required-Start:    $network
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: Run Octoprint and mjpeg for streaming
### END INIT INFO


PATH=/sbin:/usr/sbin:/bin:/usr/bin

. /lib/init/vars.sh
. /lib/lsb/init-functions

MJPG_DIR=/opt/mjpg-streamer/mjpg-streamer-experimental
OCTO_DIR=/opt/OctoPrint

do_start() {
        if [ -x $MJPG_DIR/mjpg_streamer ]; then
                [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_begin_msg &amp;quot;Stopping MJPEG-Streaming Server on port 8080&amp;quot;
                $MJPG_DIR/mjpg_streamer -i &amp;quot;$MJPG_DIR/input_raspicam.so -x 1280 -y 720 -fps 5&amp;quot; -o &amp;quot;$MJPG_DIR/output_http.so -p 8080 -w $MJPG_DIR/www&amp;quot; &amp;amp;
                [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_end_msg 0
        fi
        if [ -x $OCTO_DIR/run ]; then
                [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_begin_msg &amp;quot;Starting OctoPrint on port 80&amp;quot;
                cd $OCTO_DIR
                ./run serve --iknowwhatimdoing --port 80 &amp;amp;
                [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_end_msg 0
        fi
}

do_stop() {
        if [ -x $MJPG_DIR/mjpg_streamer ]; then
                [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_begin_msg &amp;quot;Stopping MJPEG-Streaming Server on port 8080&amp;quot;
                ps ax | grep mjpg_streamer | awk &#39;{print $1}&#39; | xargs kill -s SIGINT
                [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_end_msg 0
        fi
        if [ -x $OCTO_DIR/run ]; then
                [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_begin_msg &amp;quot;Stopping OctoPrint on port 80&amp;quot;
                cd $OCTO_DIR
                ps ax | grep &amp;quot;./run serve --iknowwhatimdoing&amp;quot; | awk &#39;{print $1}&#39; | xargs kill -s SIGQUIT
                [ &amp;quot;$VERBOSE&amp;quot; != no ] &amp;amp;&amp;amp; log_end_msg 0
        fi
}

case &amp;quot;$1&amp;quot; in
    start)
        do_start
        ;;
    restart)
        do_stop
        sleep 5
        do_start
        ;;
    status|reload|force-reload)
        echo &amp;quot;Error: argument &#39;$1&#39; not supported&amp;quot; &amp;gt;&amp;amp;2
        exit 3
        ;;
    stop)
        do_stop
        ;;
    *)
        echo &amp;quot;Usage: $0 start|stop&amp;quot; &amp;gt;&amp;amp;2
        exit 3
        ;;
esac
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Einfach nach &lt;code&gt;/opt/init.d/octoprint&lt;/code&gt; kopieren und Ausführbar machen: &lt;code&gt;chmod +x /rtc/init.d/octoprint&lt;/code&gt;
Anschliessend mit den Debian üblichen Tools das ganze automatisch in die Start-Sequenz einbauen: &lt;code&gt;insserv octoprint&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;TODO: Beim beenden macht das Script ab und an noch ein wenig Mühe&lt;/p&gt;

&lt;h1 id=&#34;slic3r-integration&#34;&gt;Slic3r Integration&lt;/h1&gt;

&lt;p&gt;Um den ganzen Prozess zu vereinfachen, kann man bei &lt;a href=&#34;http://slic3r.org/&#34;&gt;Slic3r&lt;/a&gt; ab Version 1.9.2 (oder schon früher) den &lt;a href=&#34;http://octoprint.org/&#34;&gt;OctoPrint&lt;/a&gt;-Server als Option eingeben und anschliessend wenn man alles plaziert hat, den gCode direkt auf den Server laden. Anschliessend muss man dann nur noch im WebInterface das File auswählen und drucken.&lt;/p&gt;

&lt;p&gt;Dazu wechselt man in Slic3r auf den Tab &lt;em&gt;Printer Settings&lt;/em&gt; und gibt dort bei &lt;em&gt;OctoPrint upload&lt;/em&gt; den Host und API-Key an.
Den API-Key kann man auf dem Webinterface in den Einstellungen einsehen und neu generieren.&lt;/p&gt;

&lt;p&gt;Ist das gemacht, einfach wenn man alle Objekte positionliert hat (im Tab &lt;em&gt;Plater&lt;/em&gt;) über die Schaltfläche &lt;em&gt;Send to printer&lt;/em&gt; den gCode hochladen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MATLAB Part 3, Plotten von Werten und Funktionen</title>
      <link>//ranta.ch/tutorials/matlab-part-3/</link>
      <pubDate>Sun, 19 Feb 2017 12:00:00 +0100</pubDate>
      
      <guid>//ranta.ch/tutorials/matlab-part-3/</guid>
      <description>

&lt;h1 id=&#34;matlab-plotten&#34;&gt;MATLAB - Plotten&lt;/h1&gt;

&lt;p&gt;Matlab arbeitet eigentlich nur mit Matrizen und nciht mit Zahlen
Ein &lt;code&gt;&amp;gt;&amp;gt; x = 3;&lt;/code&gt; ist eine &lt;code&gt;1x1 Matrix&lt;/code&gt; mit dem Wert &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;variablen&#34;&gt;Variablen&lt;/h2&gt;

&lt;p&gt;Kein Keyword notwendig.
Wichtig bei Schlaufen etc.: Es sollten die Zeichen &lt;code&gt;i&lt;/code&gt; und &lt;code&gt;j&lt;/code&gt; nicht verwendet werden, das sind die Imaginären Zahlen welche dadurch überschrieben werden (&lt;code&gt;&amp;gt;&amp;gt; im = 5 + 2*i&lt;/code&gt;)&lt;/p&gt;

&lt;h1 id=&#34;plotten-von-werten&#34;&gt;Plotten von Werten&lt;/h1&gt;

&lt;p&gt;In MATLAB wird die Funktion &lt;code&gt;plot(X, Y[], Z])&lt;/code&gt; verwendet um einen Vektor grafisch dar zu stellen.
Die Übergebenen Vektoren müssen logischerweise die geliche Dimension aufweisen so dass jeweils ein Punkt von X mit einem Punkt von Y (und Z) aufgezeichnet werden kann.&lt;/p&gt;

&lt;h2 id=&#34;beispiele&#34;&gt;Beispiele&lt;/h2&gt;

&lt;h3 id=&#34;einfache-2-dimensionale-linie&#34;&gt;Einfache 2-Dimensionale Linie&lt;/h3&gt;

&lt;p&gt;Zuerst werden die zwei Vektoren für die X und die Y Achse definiert und anschliessend der &lt;code&gt;plot(x, y, z)&lt;/code&gt; Funktion übergeben. Als Resultat wird ein Fenster geöffnet welches eine Linie in einem Karthesischen Koordinatensystem zeigt, welche jeweils den Wert aus dem X-Vektor mit dem Wert aus dem Y-Vektor verbindet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;&amp;gt;&amp;gt; x = [ 1, 2, 3, 5, 8 ];
&amp;gt;&amp;gt; y = [ 2, 3, 0, 5, 1 ];
&amp;gt;&amp;gt; plot(x, y);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;einfache-3-dimensionale-linie&#34;&gt;Einfache 3-Dimensionale Linie&lt;/h3&gt;

&lt;p&gt;Gleiches Prinzip wie bei der 2-Dimensionalen Linie.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;&amp;gt;&amp;gt; x = [ 1, 2, 3, 5, 8 ];
&amp;gt;&amp;gt; y = [ 2, 3, 0, 5, 1 ];
&amp;gt;&amp;gt; z = [ 2, 1, 2, 1, 3 ];
&amp;gt;&amp;gt; plot(x, y, z);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sinus-funktion&#34;&gt;Sinus-Funktion&lt;/h3&gt;

&lt;p&gt;Für jeden Wert auf der X-Achse wird ein Wert in der Y-Achse gebraucht. Zuerst wird also ein Vektor mit den Werten der X-Achse erstellt, daraus dann die Werte von Y mit der Sinus-Funktion. Die Werte auf der X-Achse gehen von &lt;code&gt;-10&lt;/code&gt; bis &lt;code&gt;+10&lt;/code&gt; mit einer Distanz von &lt;code&gt;0.5&lt;/code&gt;, also &lt;code&gt;101&lt;/code&gt; Punkten.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;&amp;gt;&amp;gt; x = -10:0.5:10;
&amp;gt;&amp;gt; y = sin(x);
&amp;gt;&amp;gt; plot(x, y);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je feiner man die X-Matrix auflöst, desto schöner wird dann auch die geplottete Funktion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MATLAB Part 2, Programmiergrundlagen</title>
      <link>//ranta.ch/tutorials/matlab-part-2/</link>
      <pubDate>Sun, 19 Feb 2017 11:00:00 +0100</pubDate>
      
      <guid>//ranta.ch/tutorials/matlab-part-2/</guid>
      <description>

&lt;h1 id=&#34;matlab-funktionen-und-schlaufen&#34;&gt;MATLAB - Funktionen und Schlaufen&lt;/h1&gt;

&lt;p&gt;Matlab arbeitet eigentlich nur mit Matrizen und nciht mit Zahlen
Ein &lt;code&gt;&amp;gt;&amp;gt; x = 3;&lt;/code&gt; ist eine &lt;code&gt;1x1 Matrix&lt;/code&gt; mit dem Wert &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;variablen&#34;&gt;Variablen&lt;/h2&gt;

&lt;p&gt;Kein Keyword notwendig.
Wichtig bei Schlaufen etc.: Es sollten die Zeichen &lt;code&gt;i&lt;/code&gt; und &lt;code&gt;j&lt;/code&gt; nicht verwendet werden, das sind die Imaginären Zahlen welche dadurch überschrieben werden (&lt;code&gt;&amp;gt;&amp;gt; im = 5 + 2*i&lt;/code&gt;)&lt;/p&gt;

&lt;h1 id=&#34;programmieren-in-matlab&#34;&gt;Programmieren in MATLAB&lt;/h1&gt;

&lt;p&gt;Normalerweise werden Skripte nicht direkt in MATLAB eingegeben, man kann das aber auch machen.
Skripte sind nichts anderes als dass, was man im Command-Prompt eingibt, in einer Datei ausgelagert, so dass man nicht immer alles neu eingeben muss.&lt;/p&gt;

&lt;h2 id=&#34;wo-sucht-matlab-nach-skripten&#34;&gt;Wo sucht MATLAB nach Skripten&lt;/h2&gt;

&lt;p&gt;Generell sucht MATLAB im aktuellen Verzeichniss und vielen anderen nach Skripten. Diese findet man heraus mit dem Kommando &lt;code&gt;&amp;gt;&amp;gt; path&lt;/code&gt;. Weitere Kommandos sind &lt;code&gt;pwd&lt;/code&gt; welches das aktuelle Verzeichniss anzeigt und &lt;code&gt;ls&lt;/code&gt; um den Inhalt an zu zeigen respektive &lt;code&gt;cd DIR&lt;/code&gt; um in eines zu wechseln.&lt;/p&gt;

&lt;p&gt;Um ein Verzeichniss zu dem &lt;code&gt;path&lt;/code&gt; hinzuzufügen, so dass MATLAB da drin nach unseren Skripten sucht, muss dies über die &lt;em&gt;Current Folder&lt;/em&gt;-View der Ordner gefunden werden und mittels Kontextmenü auf &lt;em&gt;Add to Path -&amp;gt; Selected Folders (and Subfolders)&lt;/em&gt; Funktion gemacht werden.&lt;/p&gt;

&lt;h2 id=&#34;editor-für-skripte&#34;&gt;Editor für Skripte&lt;/h2&gt;

&lt;p&gt;Wenn man sich nicht mit den Emacs-Tastenkombinationen auseinandersetzen will, dann sollte man unter &lt;em&gt;Preferences -&amp;gt; MATLAB -&amp;gt; Keyboard -&amp;gt; Shortcuts&lt;/em&gt; die aktiven Einstellungen von &lt;em&gt;Emacs Default Set&lt;/em&gt; auf &lt;em&gt;Windows Default Set&lt;/em&gt; stellen oder diejenigen Shortcuts anpassen die nicht passen.&lt;/p&gt;

&lt;p&gt;Neue Skripte/Funktionen einfach &lt;em&gt;New -&amp;gt; Skript&lt;/em&gt; erstellen und Coden (Funktionen auch über &lt;em&gt;New -&amp;gt; Skript&lt;/em&gt; erstellen). Eine praktische Ansicht ist, wenn man das Editor-Window an das normale MATLAB andockt.&lt;/p&gt;

&lt;p&gt;Im Editor kann über den &lt;strong&gt;Run&lt;/strong&gt;-Button das Skript ausgeführt und getestet werden, oder man gibt im Command-Promt den Namen des Skripts ein.&lt;/p&gt;

&lt;h1 id=&#34;syntax-funktionen-und-schlaufen&#34;&gt;Syntax, Funktionen und Schlaufen&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Kommentare werden mit &lt;code&gt;% COMMENT&lt;/code&gt; definiert.&lt;/li&gt;
&lt;li&gt;Blöcke kann man mit &lt;code&gt;%% BLOCKNAME&lt;/code&gt; definieren.
Ein Block kann verwendet werden um diesen Separiert über &lt;strong&gt;Run Section&lt;/strong&gt; ausgeführt werden.
Zusätzlich dient eine Section auch der visuellen separierung.&lt;/li&gt;
&lt;li&gt;Funktionen, Schlaufen und Bedingungen werden nicht mit Klammern sondern in Pascal-ähnlicher Syntax geschrieben: &lt;code&gt;function ... end&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;globale-funktionen&#34;&gt;Globale Funktionen&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;function RESULT = NAME(ARG...)
...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Der Funktionsname &lt;code&gt;NAME&lt;/code&gt; sollte niemals gleich heissen wie eine schon bestehende Funktion von uns oder MATLAB.&lt;/p&gt;

&lt;p&gt;Das Keyword &lt;code&gt;RESULT&lt;/code&gt; definiert, welche Variable innerhalb der Funktion als Rückgabe verwendet wird. &lt;code&gt;RESULT&lt;/code&gt; kann auch im Format einer Matrix angegeben werden: &lt;code&gt;[a, b ; c, d]&lt;/code&gt; um so eine 2-Dimensionale Matrix aus den vier Variabeln zurück zu geben.&lt;/p&gt;

&lt;p&gt;Die Parameter &lt;code&gt;ARGS...&lt;/code&gt; sind optional und werden 1:1 in die Funktion rein gegeben. Diese können dann innerhalb der Funktion verwendet werden.&lt;/p&gt;

&lt;h3 id=&#34;beispiel-einer-globalen-funktion&#34;&gt;Beispiel einer globalen Funktion&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;function y = test(x)
  % Erstellt eine Matrix befüllt mit &#39;1&#39; mit der gleichen Dimension und gibt diese zurück
  y = ones(size(x));
end

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lokale-funktionen&#34;&gt;Lokale Funktionen&lt;/h2&gt;

&lt;p&gt;Lokale Funktionen sind alle Funktionen, welche nicht so heissen wie der Dateiname. Diese sind nicht von aussen, also aus dem Command-Prompt ausführbar.&lt;/p&gt;

&lt;h2 id=&#34;wenn-dann-if-else&#34;&gt;Wenn-Dann / If-Else&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;if (BEDINGUNG)
...
else if (BEDINGUNG 2)
...
else
...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wenn man je nach Situation reagieren will, dann muss man mit einer IF-ELSE Frage erst definieren was denn geprüft werden soll und was beim Zutreffen der Bedingung gemacht werden soll.&lt;/p&gt;

&lt;h3 id=&#34;beispiel-einer-abfrage&#34;&gt;Beispiel einer Abfrage&lt;/h3&gt;

&lt;p&gt;Ein sinnloses Beispiel, welches aber veranschaulicht wie man &lt;code&gt;if - else - end&lt;/code&gt; verwendet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;&amp;gt;&amp;gt; a = 3;
&amp;gt;&amp;gt; b = 5;
&amp;gt;&amp;gt; if (a &amp;lt; b)
c = a;
else
c = b;
end

&amp;gt;&amp;gt; c
ans = 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es wird also verglichen, ob &lt;code&gt;a&lt;/code&gt; kleiner ist als &lt;code&gt;b&lt;/code&gt; und wenn dies zutrifft, dann wird der neuen Variable &lt;code&gt;c&lt;/code&gt; der Wert von &lt;code&gt;a&lt;/code&gt; zugewiesen. Wäre &lt;code&gt;a&lt;/code&gt; grösser oder gleich gross wie &lt;code&gt;b&lt;/code&gt;, so würde die Bedingung nicht zutreffen und &lt;code&gt;c&lt;/code&gt; wäre dann &lt;code&gt;5&lt;/code&gt;, also das gleiche wie &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;schlaufe-for&#34;&gt;Schlaufe / For&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;for n = MATRIX
...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*&lt;strong&gt;Wichtig:&lt;/strong&gt; Niemals die Variabelnnamen &lt;code&gt;i&lt;/code&gt; und &lt;code&gt;j&lt;/code&gt; verwenden da dies imaginäre Zahlen sind!*&lt;/p&gt;

&lt;h3 id=&#34;beispiel-einer-for-schlaufe&#34;&gt;Beispiel einer For-Schlaufe&lt;/h3&gt;

&lt;p&gt;Beispielsweise kann so eine Matrix durchlaufen werden und die Werte mit sich selber multipliziert werden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;&amp;gt;&amp;gt; y = 1;
&amp;gt;&amp;gt; for n = [ 2, 4, 6 ]
y = y * n;
end
&amp;gt;&amp;gt; y
ans = 48
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anstelle der Matrix kann man auch hier wieder die dynamisch generierten Matrizen verwenden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;&amp;gt;&amp;gt; for n = 1:10
x(n) = n * 5;
end
&amp;gt;&amp;gt; x
ans = [ 5, 10, 15, 20, 25, 30, 35, 40, 45, 50 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;konmplettes-beispiel&#34;&gt;Konmplettes Beispiel&lt;/h1&gt;

&lt;p&gt;Zuerst definieren wir eine Funtion &lt;code&gt;test&lt;/code&gt; in der Datei &lt;code&gt;test.m&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;function y = test(x)
  y = zeros( size(x) )

  for n = 1:length(x)
    if x(n) &amp;gt; 4
      y(n) = two_square( x(n) )
    else if x(n) &amp;gt; 0
      y(n) = double( x(n) )
    else
      y(n) = x(n)
    end
  end
end

function y = two_square(x)
  y = 2 .^ x;
end

function y = double(x)
  y = 2 * x;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Das ganze kann nun in einem Skript verwenden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;clear all;

x = -2:0.01:5;
y = test(x);
plot(x,y)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Es wird also zuerst der ganze Stack geleert und anschliessend ein x-Vektor initialisert und davon dann der y-Vektor mit der &lt;code&gt;test(x)&lt;/code&gt; Funktion berechnet. Das ganze dann zur Veranschaulichung noch ausgegeben mit derplot-Funktion.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MATLAB Part 1, Grundlagen</title>
      <link>//ranta.ch/tutorials/matlab-part-1/</link>
      <pubDate>Sun, 19 Feb 2017 10:00:00 +0100</pubDate>
      
      <guid>//ranta.ch/tutorials/matlab-part-1/</guid>
      <description>

&lt;h1 id=&#34;matlab-grundlagen&#34;&gt;MATLAB - Grundlagen&lt;/h1&gt;

&lt;p&gt;Matlab arbeitet eigentlich nur mit Matrizen und nicht mit Zahlen
Ein &lt;code&gt;&amp;gt;&amp;gt; x = 3;&lt;/code&gt; ist eine &lt;code&gt;1x1 Matrix&lt;/code&gt; mit dem Wert &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unter &lt;a href=&#34;https://ch.mathworks.com/programs/trials/trial_request.html?prodcode=ML&#34;&gt;Free Product Trial&lt;/a&gt; kann eine freie Trial-Lizenz angefragt werden.&lt;/p&gt;

&lt;h2 id=&#34;variablen&#34;&gt;Variablen&lt;/h2&gt;

&lt;p&gt;Kein Keyword notwendig.
Wichtig bei Schlaufen etc.: Es sollten die Zeichen &lt;code&gt;i&lt;/code&gt; und &lt;code&gt;j&lt;/code&gt; nicht verwendet werden, das sind die Imaginären Zahlen welche dadurch überschrieben werden (&lt;code&gt;&amp;gt;&amp;gt; im = 5 + 2*i&lt;/code&gt;)&lt;/p&gt;

&lt;h1 id=&#34;eingabe-von-matrizen-und-werten&#34;&gt;Eingabe von Matrizen und Werten&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;&amp;gt;&amp;gt; x = [ 1, 2, 3 ]; // Zeilenvektor 1x3
&amp;gt;&amp;gt; y = [ 1; 2; 3 ]; // Spaltenvektor 3x1
&amp;gt;&amp;gt; m = [ 1,2,3 ; 4,5,6 ; 7,8,9 ]; // Eine 3x3 Matrix
&amp;gt;&amp;gt; m = 1:5; // Ein Zelenvektor von 1 bis 5
&amp;gt;&amp;gt; m = 1:0.5:5; // Ein Zelenvektor von 1 bis 5 mit 0.5er Schritten (siehe linspace(a,b,s))
&amp;gt;&amp;gt; r = rand(3, 4); // Eine 3x4 Matrix mit Random-Werten zwischen 0 bis 1
&amp;gt;&amp;gt; z = zeros(3, 4); // Eine 3x4 Matrix mit 0en
&amp;gt;&amp;gt; o = ones(3, 4); // Eine 3x4 Matrix mit 1en
&amp;gt;&amp;gt; x(1, 4) = 10; // Der Matrix x in Zeile 1 Spalte 4 den Wert 10 zuweisen
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rechnen-mit-matrizen&#34;&gt;Rechnen mit Matrizen&lt;/h2&gt;

&lt;p&gt;Matrix für Beispiele:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;A = [ 1, 2, 3, 4, 5 ;
      5, 6, 7, 8, 9 ;
      4, 3, 2, 1, 0 ;
      8, 7, 6, 5, 4 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Eine Matrix wird mit dem Hochkomma transformiert: &lt;code&gt;&amp;gt;&amp;gt; y = x&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Auslesen eines Wertes: Hier Beispielshaft der Wert in der zweiten Zeile und zweiten Spalte &lt;code&gt;&amp;gt;&amp;gt; A(2, 2)&lt;/code&gt;
Als Resultat kommt dann also &lt;code&gt;ans = 6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Auslesen einer Spalte: Hier Beispielshaft die zweite Spalte &lt;code&gt;&amp;gt;&amp;gt; A(:, 2)&lt;/code&gt;
Als Resultat kommt dann also &lt;code&gt;ans = 2 ; 6 ; 3 ; 7&lt;/code&gt; (ein Spaltenvektor)&lt;/li&gt;
&lt;li&gt;Auslesen einer Zeile: Hier Beispielshaft die dritte Zeile &lt;code&gt;&amp;gt;&amp;gt; A(3, :)&lt;/code&gt;
Als Resultat kommt dann also &lt;code&gt;ans = 4, 3, 2, 1, 0&lt;/code&gt; (ein Zeilenvektor)&lt;/li&gt;
&lt;li&gt;Auslesen von mehreren Werten: &lt;code&gt;&amp;gt;&amp;gt; A([1, 3], 4)&lt;/code&gt;
Als Resultat kommt hier nun der 1 und 3 Wert aus der Spalte 4, ein Spaltenvektor: &lt;code&gt;ans = 4 ; 1&lt;/code&gt;
Für einen Zeilenvektor entsprechend umgekehrt: &lt;code&gt;A(3, [1, 4])&lt;/code&gt; was den Vektor &lt;code&gt;ans = 4, 1&lt;/code&gt; ergibt
Oder für eine Submatrix: &lt;code&gt;A([1, 3], [1, 4])&lt;/code&gt; was dann den Wert &lt;code&gt;ans = [ 1, 4 ; 4, 1 ]&lt;/code&gt; also aus den Zeilen 1 und 3 jeweils die Werte an Position 1 und 4.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ACHTUNG: MATLAB rechnet numerisch mit Matrizen&lt;/strong&gt;
Die normalen arithmetischen Funktionen &lt;code&gt;*, -, +, ^&lt;/code&gt; werden als Matrix/Skalar-Funktionen angewendet und nicht als arithmentische Funktionen.
Will man mit einer Matrix elementweise rechnen, muss man einen &lt;code&gt;.&lt;/code&gt; vor den Operator setzen: &lt;code&gt;.*, .-, .+, .^&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;&amp;gt;&amp;gt; x = [ 1, 2, 3, 4, 5 ];  // Ein 1x3 Zeilenvektor
&amp;gt;&amp;gt; y = x&#39;;                 // Ein 3x1 Spaltenvektor
&amp;gt;&amp;gt; x * y
ans = 55
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hier wird also ein Skalarprodukt gemacht nach folgendem Schema:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;              y
              
              1
              2
              3
              4
              5
x  1 2 3 4 5 55
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hingegen würde &lt;code&gt;&amp;gt;&amp;gt; y * x&lt;/code&gt; folgendes Skalarprodukt ergeben:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;x  1   2   3   4   5
1  1   2   3   4   5
2  1   4   6   8  10
3  3   6   9  12  15
4  4   8  12  16  20
5  5  10  15  20  25
y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arithmentische Berechnungen muss man immer Elementweise machen, Ausnahme ist das Skalarprodukt mit einer 1x1 Matrix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;&amp;gt;&amp;gt; x = [ 1, 2, 3, 4, 5 ];
&amp;gt;&amp;gt; x * 10
ans = [ 10, 20, 30, 40, 50 ]

&amp;gt;&amp;gt; x .^ 2
ans = [ 1, 4, 9, 16, 25 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;beispiele&#34;&gt;Beispiele&lt;/h3&gt;

&lt;p&gt;Gegebenen ist folgende Matrix:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;A = [ 1, 2, 3, 4, 5 ;
      5, 6, 7, 8, 9 ;
      4, 3, 2, 1, 0 ;
      8, 7, 6, 5, 4 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aus dieser sollen nun unterschiedliche neue Matrizen erstellt werden.&lt;/p&gt;

&lt;h4 id=&#34;1-neue-matrix-aus-jeder-zweiten-spalte&#34;&gt;1.) Neue Matrix aus jeder zweiten Spalte&lt;/h4&gt;

&lt;p&gt;Das kann man nun mit mehreren Wegen lösen.
Entweder man gibt die spalten fix an, was unschön ist:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;A1 = A(:, 2, 4)
ans = [ 2, 4 ;
        6, 8 ;
        3, 1 ;
        7, 5 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;oder verwendet eine Submatrix welche die gewünschten Spalten berechnet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;A2 = A(:, 2:2:end )
ans = [ 2, 4 ;
        6, 8 ;
        3, 1 ;
        7, 5 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hier verwendet man nun eine berechnete Matrix &lt;code&gt;2:2:end&lt;/code&gt; welche wie oben gezeigt eine Matrix erstllt die bei &lt;code&gt;2&lt;/code&gt; beginnt und zweierschritte macht. Das Keyword &lt;code&gt;end&lt;/code&gt; kann hier verwendet werden anstelle der &lt;code&gt;5&lt;/code&gt; (also Anstelle der maximalen Anzahl Spalten) - Es referenziert auf die Matrix &lt;code&gt;A&lt;/code&gt; in elcher wir uns ja befinden.&lt;/p&gt;

&lt;h4 id=&#34;2-neue-matrix-aus-jeder-zweiten-spalte-und-jeder-zweiten-zeile&#34;&gt;2.) Neue Matrix aus jeder zweiten Spalte und jeder zweiten Zeile&lt;/h4&gt;

&lt;p&gt;Hier das selbe Prinzip: Man verwendet eine berechnete Matrix um die neue aus der gegebenen zu erstellen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;A3 = A(2:2:end, 2:2:end)
ans = [ 6, 8 ;
        7, 5 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So kann eine grosse Matrix, Beispielsweise &lt;code&gt;B = rand(10)&lt;/code&gt;, schnell in eine neue transformiert werden.&lt;/p&gt;

&lt;h1 id=&#34;datentypen&#34;&gt;Datentypen&lt;/h1&gt;

&lt;p&gt;Standardmässig sind alle Zahlen in MATAB &lt;code&gt;double&lt;/code&gt;.
Um explizip einen anderen Datentypen zu erhalten, muss man die Casting-funktionen verwenden:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt; x = uint8(VAR)&lt;/code&gt;: Unsigned Integer mit 8 Bit.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt; x = logical(VAR)|false|true&lt;/code&gt;: Logical aka Boolean.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&amp;gt; x = &#39;text&#39;&lt;/code&gt;: char, also normaler Text.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;wichtige-befehle&#34;&gt;Wichtige Befehle&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clc&lt;/code&gt; Den Workspace leeren.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear VAR|all&lt;/code&gt; Eine einzelne oder alle Variablen löschen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zeros(X, Y, ...)&lt;/code&gt; Eine mit 0 gefüllte Matrix erstellen mit den gegebenen Dimensionen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ones(X, Y, ...)&lt;/code&gt; Eine mit 1 gefüllte Matrix erstellen mit den gegebenen Dimensionen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linspace(FROM, TO, NUM)&lt;/code&gt; Einen Zeilenvektor vom FROM bis TO mit NUM Zahlen (nicht Schritten) erstellen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logspace(FROM, TO, NUM)&lt;/code&gt; Einen Zeilenvektor vom 10^FROM bis 10^TO mit NUM Zahlen (nicht Schritten) erstellen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logspace(log10(FROM), log10(TO), NUM)&lt;/code&gt; Einen Zeilenvektor vom FROM bis TO mit NUM Zahlen (nicht Schritten) erstellen - Äquivalent zu &lt;code&gt;linspace()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size(VAR)&lt;/code&gt; Gibt die Grösse der Matrix zurück, also bei einer 3x4 Matrix ein &lt;code&gt;ans = 3  4&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length(VAR)&lt;/code&gt; Gibt die grössere Grösse der Matrix zurück, also bei einer 3x4 Matrix ein &lt;code&gt;ans = 4&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rank(VAR)&lt;/code&gt; Bestimmt den Rang der Matrix, welcher im normalfall gleich der Dimensin ist (ausser in speziellen Fällen).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;det(VAR)&lt;/code&gt; Betsimmt die Determinante der Matrix.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot(X, Y, Z)&lt;/code&gt; Zeigt die eingegebenen Vektoren grafisch, Z ist optional.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>